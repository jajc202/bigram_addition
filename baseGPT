{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOZLe8Eo6a3nxp+KuBWRq0+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jajc202/bigram_addition/blob/main/baseGPT\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "w5wU5Pjdbhkf"
      },
      "outputs": [],
      "source": [
        "#--------------------------------------------------------------\n",
        "#         Title:    bigram.py\n",
        "#\n",
        "#   Description:    A simple bigram language model\n",
        "#\n",
        "#        Author:    Josh Clark\n",
        "#\n",
        "#       Created:    11/08/2024\n",
        "#\n",
        "#  Last Updated:    11/08/2024\n",
        "#\n",
        "#--------------------------------------------------------------\n",
        "\n",
        "#--------------------------------------------------------------\n",
        "# Import relevant packages\n",
        "#--------------------------------------------------------------\n",
        "import torch                            # Import PyTorch\n",
        "import torch.nn as nn                   # Import PyTorch neural network library\n",
        "from torch.nn import functional as F    # Import functional\n",
        "import random                           # Import random\n",
        "\n",
        "\n",
        "#--------------------------------------------------------------\n",
        "# START OF USER EDIT SECTION\n",
        "#--------------------------------------------------------------\n",
        "# Set Hyper Parameters\n",
        "batch_size = 64                                             # How many examples to process in parallel\n",
        "block_size = 256                                            # Maximum context length for predictions\n",
        "max_iters = 1000                                            # Maximum training iterations\n",
        "eval_interval = 300                                         # Train and Val loss to be evaluated every #eval_interval steps\n",
        "learning_rate = 3e-4                                        # Learning rate for optimization\n",
        "device = 'cuda' if torch.cuda.is_available() else 'cpu'     # Run on GPU if available\n",
        "eval_iters = 200                                            # Number of batches to compute average loss over in estimate_loss()\n",
        "n_embd = 384                                                # Number of embeddings\n",
        "n_head = 6                                                  # Number of heads of self-attention\n",
        "n_layer = 6                                                 # Number of Transformer Blocks\n",
        "dropout = 0.2                                               # Proportion of neurons to shut off during training\n",
        "\n",
        "\n",
        "# Set number of tokens to generate\n",
        "max_tokens = 100\n",
        "\n",
        "# Set input path for training data\n",
        "input_path = r\"C:\\Users\\josha\\OneDrive\\Attachments\\Documents\\Python\\Machine Learning\\Andrej Karpathy Lectures\\bigram\\02. Data\\tiny_shakespeare.txt\"\n",
        "#--------------------------------------------------------------\n",
        "# END OF USER EDIT SECTION\n",
        "#--------------------------------------------------------------\n",
        "\n",
        "#--------------------------------------------------------------\n",
        "# Import Training Data\n",
        "#--------------------------------------------------------------\n",
        "with open(input_path, 'r', encoding='utf-8') as f:\n",
        "    text = f.read()\n",
        "\n",
        "\n",
        "#--------------------------------------------------------------\n",
        "# Tokenise the Data\n",
        "#--------------------------------------------------------------\n",
        "# Set seed for reproducibility\n",
        "torch.manual_seed(1337)\n",
        "\n",
        "# Get list of all unique characters in the dataset\n",
        "chars = sorted(list(set(text)))\n",
        "vocab_size = len(chars)\n",
        "\n",
        "# Create a mapping from characters to integers\n",
        "stoi = {ch:i for i,ch in enumerate(chars)}\n",
        "itos = {i:ch for i,ch in enumerate(chars)}\n",
        "\n",
        "# Build the encoder and decoder\n",
        "encode = lambda s: [stoi[c] for c in s]             # Encoder: take a string, output a list of integers\n",
        "decode = lambda l: ''.join([itos[i] for i in l])    # Decoder: take a list of integers, output a string\n",
        "\n",
        "# Tokenise the dataset\n",
        "#   Our model is a character-level model\n",
        "#   hence our tokens are individual characters\n",
        "data = torch.tensor(encode(text), dtype=torch.long)\n",
        "\n",
        "\n",
        "#--------------------------------------------------------------\n",
        "# Build the Splits\n",
        "#--------------------------------------------------------------\n",
        "# Set split proportions\n",
        "train_pct = 0.9\n",
        "val_pct = 0.1\n",
        "test_pct = 0.0      # We wont define a test set for now\n",
        "\n",
        "# Calculate split indexes\n",
        "n1 = int(train_pct * len(data))\n",
        "n2 = int((train_pct + val_pct) * len(data))\n",
        "\n",
        "# Create splits\n",
        "train_data = data[:n1]\n",
        "val_data = data[n1:n2]\n",
        "test_data = data[n2:]\n",
        "\n",
        "\n",
        "#--------------------------------------------------------------\n",
        "# Define function to generate batches\n",
        "#--------------------------------------------------------------\n",
        "def get_batch(split):\n",
        "    # Define data split to pick from\n",
        "    if split == 'train':\n",
        "        data = train_data\n",
        "    elif split == 'val':\n",
        "        data = val_data\n",
        "    elif split == 'test':\n",
        "        data = test_data\n",
        "    else:\n",
        "        raise ValueError(f\"Invalid split value: '{split}'. Expected one of: 'train', 'val', 'test'.\")\n",
        "\n",
        "    # Generate #batch_size random indexes from 0 to len(data) - block_size\n",
        "    ix = torch.randint(len(data) - block_size, (batch_size,))\n",
        "\n",
        "    # Gather inputs (x) and targets (y)\n",
        "    x = torch.stack([data[i:i+block_size] for i in ix])\n",
        "    y = torch.stack([data[i+1:i+block_size+1] for i in ix])\n",
        "    return x, y\n",
        "\n",
        "\n",
        "#--------------------------------------------------------------\n",
        "# Define function to estimate the loss\n",
        "#--------------------------------------------------------------\n",
        "# Disable gradient tracking\n",
        "@torch.no_grad()\n",
        "\n",
        "# Define function to estimate the loss over multiple batches\n",
        "def estimate_loss():\n",
        "    # Initialise output\n",
        "    out = {}\n",
        "\n",
        "    # Set model in evaluation mode\n",
        "    model.eval()\n",
        "\n",
        "    # Compute avg loss for both train and val splits\n",
        "    for split in ['train', 'val']:\n",
        "        # Initialise tensor to store losses\n",
        "        losses = torch.zeros(eval_iters)\n",
        "\n",
        "        # Calculate loss for #eval_iters batches (to reduce noise)\n",
        "        for k in range(eval_iters):\n",
        "            X, Y = get_batch(split)         # Define inputs and targets\n",
        "            logits, loss = model(X, Y)      # Calculate loss\n",
        "            losses[k] = loss.item()         # Add loss of current batch to storage tensor\n",
        "\n",
        "        # Compute the average loss over all batches for current split\n",
        "        out[split] = losses.mean()\n",
        "\n",
        "    # Reset the model back to training mode\n",
        "    model.train()\n",
        "\n",
        "    # Return avg losses for train and val splits\n",
        "    return out\n",
        "\n",
        "\n",
        "#--------------------------------------------------------------\n",
        "# Create Self-Attention Head Module\n",
        "#--------------------------------------------------------------\n",
        "class Head(nn.Module):\n",
        "    ''' One Head of Self-Attention '''\n",
        "\n",
        "    # Initialise the class\n",
        "    def __init__(self, head_size):\n",
        "        # Initialise using parent class nn.Module\n",
        "        super().__init__()\n",
        "\n",
        "        # Define key, value and query tensors\n",
        "        self.key = nn.Linear(n_embd, head_size, bias=False)\n",
        "        self.query = nn.Linear(n_embd, head_size, bias=False)\n",
        "        self.value = nn.Linear(n_embd, head_size, bias=False)\n",
        "        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))    # Create buffer for lower triangular matrix of ones\n",
        "        self.dropout = nn.Dropout(dropout)\n",
        "\n",
        "    # Define forward pass\n",
        "    def forward(self, x):\n",
        "        # Define batch, time and channel dimension of input\n",
        "        B, T, C = x.shape\n",
        "\n",
        "        # Define key and query tensors\n",
        "        k = self.key(x)                                             # (B,T,C)\n",
        "        q = self.query(x)                                           # (B,T,C)\n",
        "\n",
        "        # Compute attention scores\n",
        "        wei = q @ k.transpose(-2,-1)                                # Product of key and query matrices (B,T,T)\n",
        "        wei *= C**-0.5                                              # Normalise\n",
        "        wei = wei.masked_fill(self.tril[:T,:T] == 0, float('-inf')) # Ensure future tokens dont influence past ones (makes this a decoder block)\n",
        "        wei = F.softmax(wei, dim=-1)                                # (B,T,T)\n",
        "        wei = self.dropout(wei)                                     # Dropout layer\n",
        "\n",
        "        # Perform weighted aggregation of values\n",
        "        v = self.value(x)                                           # (B,T,C)\n",
        "        out = wei @ v                                               # Updated embeddings (B,T,C)\n",
        "        return out\n",
        "\n",
        "\n",
        "#--------------------------------------------------------------\n",
        "# Create Multi-Headed Attention Module\n",
        "#--------------------------------------------------------------\n",
        "class MultiHeadAttention(nn.Module):\n",
        "    ''' Multiple heads of self-attention in parallel '''\n",
        "\n",
        "    # Initialise the class\n",
        "    def __init__(self, num_heads, head_size):\n",
        "        # Initialise using parent class nn.Module\n",
        "        super().__init__()\n",
        "\n",
        "        #\n",
        "        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])     # Create list of #num_heads heads of attention\n",
        "        self.proj = nn.Linear(n_embd, n_embd)                                       # Create projection\n",
        "        self.dropout = nn.Dropout(dropout)                                          # Dropout layer\n",
        "\n",
        "    # Define forward pass\n",
        "    def forward(self, x):\n",
        "        out = torch.cat([h(x) for h in self.heads], dim=-1)                          # Concatenate outputs over the channel C dimension\n",
        "        out = self.dropout(self.proj(out))                                           # Projectiona and dropout\n",
        "        return out\n",
        "\n",
        "\n",
        "#--------------------------------------------------------------\n",
        "# Create Feed Forward Module\n",
        "#--------------------------------------------------------------\n",
        "class FeedForward(nn.Module):\n",
        "    ''' Simple linear layer followed by a non-linearity '''\n",
        "\n",
        "    # Initialise the class\n",
        "    def __init__(self, n_embd):\n",
        "        # Initialise using parent class nn.Module\n",
        "        super().__init__()\n",
        "\n",
        "        # Linear layer then non-linearity\n",
        "        self.net = nn.Sequential(\n",
        "            nn.Linear(n_embd, 4 * n_embd),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(4 * n_embd, n_embd),\n",
        "            nn.Dropout(dropout),\n",
        "        )\n",
        "\n",
        "    # Define forward pass\n",
        "    def forward(self, x):\n",
        "        return self.net(x)\n",
        "\n",
        "\n",
        "#--------------------------------------------------------------\n",
        "# Create the Transformer Block\n",
        "#--------------------------------------------------------------\n",
        "class Block(nn.Module):\n",
        "    ''' Transformer Block: communication followed by computation '''\n",
        "\n",
        "    # Initialise the class\n",
        "    def __init__(self, n_embd, n_head):\n",
        "        # Initialise using parent class nn.Module\n",
        "        super().__init__()\n",
        "\n",
        "        # Define the head size\n",
        "        head_size = n_embd // n_head\n",
        "\n",
        "        # Define structural elements of the block\n",
        "        self.sa = MultiHeadAttention(n_head, head_size)     # Self-attention\n",
        "        self.ffwd = FeedForward(n_embd)                     # Feed forward\n",
        "        self.ln1 = nn.LayerNorm(n_embd)                     # First LayerNorm\n",
        "        self.ln2 = nn.LayerNorm(n_embd)                     # Second LayerNorm\n",
        "\n",
        "    # Define forward pass\n",
        "    def forward(self, x):\n",
        "        x = x + self.sa(self.ln1(x))                        # LayerNorm then Self-Attention, with Residual Connection\n",
        "        x = x + self.ffwd(self.ln2(x))                      # LayerNorm then Feed Forward, with Residual Connection\n",
        "        return x\n",
        "\n",
        "\n",
        "#--------------------------------------------------------------\n",
        "# Build Bigram Language Model\n",
        "#--------------------------------------------------------------\n",
        "class BigramLanguageModel(nn.Module):\n",
        "\n",
        "    # Initialise the class\n",
        "    def __init__(self):\n",
        "        # Initialise using parent class nn.Module\n",
        "        super().__init__()\n",
        "\n",
        "        self.token_embedding_table = nn.Embedding(vocab_size, n_embd)                           # Value embedding table\n",
        "        self.position_embedding_table = nn.Embedding(block_size, n_embd)                        # Position embedding table\n",
        "        self.blocks = nn.Sequential(*[Block(n_embd, n_head=n_head) for _ in range(n_layer)])    # Build #n_layer transformer blocks\n",
        "        self.ln_f = nn.LayerNorm(n_embd)                                                        # Final Layer Norm\n",
        "        self.lm_head = nn.Linear(n_embd, vocab_size)                                            # Output Layer\n",
        "\n",
        "    # Define forward pass\n",
        "    #   idx, targets are tensors of size (B,T)\n",
        "    def forward(self, idx, targets=None):\n",
        "        # Define batch and time dimension of input\n",
        "        B, T = idx.shape\n",
        "\n",
        "        # Define the layers of the model\n",
        "        tok_emb = self.token_embedding_table(idx)                               # (B,T,C)\n",
        "        pos_emb = self.position_embedding_table(torch.arange(T, device=device)) # (T,C)\n",
        "        x = tok_emb + pos_emb                                                   # (B,T,C)\n",
        "        x = self.blocks(x)                                                      # (B,T,C)\n",
        "        x = self.ln_f(x)                                                        # (B,T,C)\n",
        "        logits = self.lm_head(x)                                                # (B,T,vocab_size)\n",
        "\n",
        "        # Calculate loss\n",
        "        if targets is None:\n",
        "            loss = None\n",
        "        else:\n",
        "            # Reshape logits and targets to be compatible with F.cross_entropy\n",
        "            B, T, C = logits.shape\n",
        "            logits = logits.view(B*T, C)    # (B,T,C) => (B*T,C)\n",
        "            targets = targets.view(B*T)     # (B,T)   => (B*T)\n",
        "\n",
        "            # Evaluate loss using negative log-likelihood\n",
        "            loss = F.cross_entropy(logits, targets)\n",
        "\n",
        "        return logits, loss\n",
        "\n",
        "    # Define generation from the model\n",
        "    def generate(self, idx, max_new_tokens):\n",
        "        for _ in range(max_new_tokens):\n",
        "            # Crop idx to the last #block_size tokens\n",
        "            idx_cond = idx[:, -block_size:]\n",
        "\n",
        "            # Get the predictions from the forward pass\n",
        "            logits, loss = self(idx_cond)\n",
        "\n",
        "            # Select last character's embedding for each example in the batch\n",
        "            logits = logits[:, -1, :]                           # (B,T,C) => (B,C)\n",
        "\n",
        "            # Apply softmax to get probability distributions\n",
        "            probs = F.softmax(logits, dim=-1)                   # (B,C)\n",
        "\n",
        "            # Sample from each distribution\n",
        "            idx_next = torch.multinomial(probs, num_samples=1)  # (B,1)\n",
        "\n",
        "            # Append sampled indexes to running sequence\n",
        "            idx = torch.cat((idx, idx_next), dim=1)             # (B,T+1)\n",
        "        return idx\n",
        "\n",
        "\n",
        "#--------------------------------------------------------------\n",
        "# Create Instance of the Model\n",
        "#--------------------------------------------------------------\n",
        "model = BigramLanguageModel()\n",
        "m = model.to(device)\n",
        "\n",
        "\n",
        "#--------------------------------------------------------------\n",
        "# Training the Model\n",
        "#--------------------------------------------------------------\n",
        "# Create a PyTorch Optimizer\n",
        "optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)\n",
        "\n",
        "# Print at start of training\n",
        "print(\"-----------------------------------------------------------\")\n",
        "print(\"MODEL TRAINING\")\n",
        "print(\"-----------------------------------------------------------\")\n",
        "print(\"Model Hyper Parameters:\")\n",
        "print(f\"     batch_size = {batch_size}\")\n",
        "print(f\"     block_size = {block_size}\")\n",
        "print(f\"     max_iters = {max_iters}\")\n",
        "print(f\"     eval_interval = {eval_interval}\")\n",
        "print(f\"     learning_rate = {learning_rate}\")\n",
        "print(f\"     device = {device}\")\n",
        "print(f\"     eval_iters = {eval_iters}\")\n",
        "print(f\"     n_embd = {n_embd}\")\n",
        "print(\"-----------------------------------------------------------\")\n",
        "\n",
        "# Create a simple training loop\n",
        "for iter in range(max_iters):\n",
        "\n",
        "    # Every once in a while evaluate the loss of train and val sets\n",
        "    if iter % eval_interval == 0:\n",
        "        losses = estimate_loss()\n",
        "        print(f\"Step {iter}: train loss = {losses['train']:.4f}, val loss = {losses['val']:.4f}\")\n",
        "\n",
        "    # Sample a batch of data\n",
        "    xb, yb = get_batch('train')\n",
        "\n",
        "    # Evaluate the loss\n",
        "    logits, loss = m(xb, yb)                # Evaluate the loss\n",
        "    optimizer.zero_grad(set_to_none=True)   # Zero out gradients from prev step\n",
        "    loss.backward()                         # Backprop\n",
        "    optimizer.step()                        # Update parameters\n",
        "\n",
        "# Display the loss at the end of training\n",
        "print(\"-----------------------------------------------------------\")\n",
        "print(\"-----------------------------------------------------------\")\n",
        "print(f\"Loss after {max_iters} training steps: {loss.item()}\")\n",
        "print(\"-----------------------------------------------------------\")\n",
        "print(\"-----------------------------------------------------------\\n\")\n",
        "\n",
        "\n",
        "#--------------------------------------------------------------\n",
        "# Generate from the Model\n",
        "#--------------------------------------------------------------\n",
        "# Print at start of generation\n",
        "print(\"-----------------------------------------------------------\")\n",
        "print(\"GENERATING FROM THE MODEL\")\n",
        "print(\"-----------------------------------------------------------\")\n",
        "\n",
        "# Generation\n",
        "input_idx = torch.zeros((1,1), dtype=torch.long, device=device)             # Start with just idx=0 (new line char)\n",
        "gen_idxs = m.generate(input_idx, max_new_tokens=max_tokens)[0].tolist()     # Generate next 100 char-indexes\n",
        "decoded_gen = decode(gen_idxs)                                              # Decode indexes to chars\n",
        "print(f\"Generated text: {decoded_gen}\")"
      ]
    }
  ]
}